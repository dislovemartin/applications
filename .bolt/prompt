# Frontend Guidelines for ACGS-PGP Framework

## 1. React Component Structure

### Component Organization
- **Functional Components**: Use React functional components with hooks instead of class components for better performance and readability
- **Component Files**: Create one component per file, named exactly the same as the component (e.g., `PolicyCard.tsx` for a `PolicyCard` component)
- **Component Structure**: Structure each component file in this specific order:
  1. Import statements (group by external libraries, then internal modules)
  2. TypeScript interfaces/types with descriptive names (e.g., `PolicyCardProps`)
  3. Component function declaration with proper JSDoc comments
  4. Helper functions (placed after the component or in a separate utils file if reused)
  5. Default export statement (named exports for utilities)

### Props and State Management
- **Props**: Define explicit TypeScript interfaces for all component props with required/optional markers
- **State Management**: Use appropriate React hooks based on complexity:
  - `useState` for simple component-level state
  - `useReducer` for complex state logic
  - `useEffect` with proper dependency arrays for side effects
  - `useContext` for cross-component state access
- **Context API**: Implement context providers for global state (auth, theme, etc.) in `/src/contexts/` directory
- **Prop Drilling**: Limit prop passing to maximum 2-3 levels; use Context API for deeper hierarchies

## 2. Styling Approach

### CSS Organization
- **Component Styling**: Create component-specific CSS modules (e.g., `Layout.module.css` for `Layout.tsx`)
- **Global Styles**: Define global variables and reset styles in `/src/styles/global.css`
- **CSS Variables**: Implement a design system using CSS custom properties in `:root` for:
  - Color palette (primary, secondary, neutrals)
  - Typography scale (font sizes, weights, line heights)
  - Spacing scale (in 4px increments: 4px, 8px, 16px, etc.)
- **Responsive Design**: Use mobile-first media queries with standard breakpoints (576px, 768px, 992px, 1200px)

### Style Guidelines
- **Color Scheme**: Apply consistently throughout the application:
  - Primary: `#00bcd4` (accent color for primary actions)
  - Secondary: `#0097a7` (hover states, secondary actions)
  - Background: `#f4f4f4` (page backgrounds)
  - Text: `#333333` (body text)
  - Headers: `#2c3e50` (headings)
- **Typography**: Use system font stack with fallbacks:
  - Font family: `-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif`
  - Clear hierarchy: h1 (24px), h2 (20px), h3 (18px), body (16px), small (14px)
- **Spacing**: Apply consistent spacing using the 4px grid system
- **Component Styling**: Follow BEM naming convention for CSS classes (e.g., `.policy-card__title--highlighted`)

## 3. Form Handling

### Form Components
- **Form Structure**: Wrap form elements in semantic `<form>` tags with proper `onSubmit` handlers
- **Form State**: Implement controlled components using `useState` hooks with appropriate validation:
  ```tsx
  const [formData, setFormData] = useState({ name: '', email: '' });
  const handleChange = (e) => setFormData({...formData, [e.target.name]: e.target.value});
  ```
- **Validation**: Apply client-side validation before submission using:
  - Form-level validation for cross-field rules
  - Field-level validation for immediate feedback
- **Error Display**: Position error messages directly below each input field with appropriate ARIA attributes
- **Loading States**: Disable submit buttons during form submission and show loading indicators

### Form Submission
- **Event Handling**: Always use `e.preventDefault()` on form submission to prevent page reloads
- **API Integration**: Call appropriate service methods from `/src/services/` directory for form submission
- **Success/Error Handling**: Implement toast notifications or inline messages for submission results
- **Form Reset**: Clear form fields after successful submission while preserving user context

## 4. Navigation and Routing

### Route Structure
- **Route Definition**: Define all routes in `/src/App.tsx` using React Router v6 syntax:
  ```tsx
  <Routes>
    <Route path="/principles" element={<PrinciplesPage />} />
    <Route path="/policies/:id" element={<PolicyDetailPage />} />
  </Routes>
  ```
- **Protected Routes**: Implement `<ProtectedRoute>` component that redirects unauthenticated users to login
- **Route Naming**: Use kebab-case for all route paths (e.g., `/policy-synthesis`, `/user-profile`)
- **Navigation**: Create a consistent navigation component in `Layout.tsx` that appears on all pages

### Navigation Components
- **Header/Navbar**: Include in `Layout.tsx` with conditional rendering based on `isAuthenticated` state
- **Active Link Styling**: Apply `.active` class to current route using `NavLink` component
- **Breadcrumbs**: Implement for pages deeper than 2 levels in the hierarchy
- **Redirects**: Use `<Navigate to="/path" />` component for redirects after form submissions or authentication changes

## 5. UI Component Guidelines

### Common Components
- **Buttons**: Create a `Button` component with variants (primary, secondary, danger) and states (hover, active, disabled)
- **Cards**: Implement a flexible `Card` component for displaying policy information, principles, and other content blocks
- **Tables**: Develop a reusable `Table` component with sorting, filtering, and pagination capabilities
- **Modals**: Use a consistent `Modal` component for confirmations, forms, and information displays
- **Loaders**: Create both full-page and component-level loading indicators (spinners, skeletons)

### Component Reusability
- **Atomic Design**: Structure components following atomic design principles:
  - Atoms: buttons, inputs, icons (`/src/components/atoms/`)
  - Molecules: form groups, cards, alerts (`/src/components/molecules/`)
  - Organisms: navigation bars, policy lists (`/src/components/organisms/`)
- **Component Props**: Design components with flexible props including:
  - Required core functionality
  - Optional customization
  - Event handler props with consistent naming (`onClick`, `onSubmit`)
- **Composition**: Use component composition instead of inheritance:
  ```tsx
  <Card>
    <Card.Header>Title</Card.Header>
    <Card.Body>Content</Card.Body>
  </Card>
  ```
- **Render Props/Children**: Use for components that need to render dynamic content

## 6. Performance Optimization

### Rendering Optimization
- **Memoization**: Apply `React.memo()` to components that:
  - Receive the same props frequently
  - Perform expensive rendering operations
  - Are used in lists or frequently re-rendered parents
- **Callback Memoization**: Use `useCallback()` for event handlers passed as props to child components
- **Derived State**: Implement `useMemo()` for expensive calculations that derive values from props or state
- **List Rendering**: Always provide stable, unique `key` props for list items (avoid using array index)

### Asset Optimization
- **Image Optimization**: Compress all images and use modern formats (WebP with fallbacks)
- **Lazy Loading**: Implement for:
  - Images using the `loading="lazy"` attribute
  - Components below the fold using `React.lazy()` and `Suspense`
- **Code Splitting**: Apply route-based code splitting to reduce initial bundle size:
  ```tsx
  const PolicyPage = React.lazy(() => import('./pages/PolicyPage'));
  ```
- **Bundle Analysis**: Run Webpack Bundle Analyzer quarterly to identify and address large dependencies

## 7. Accessibility Guidelines

### Basic Accessibility
- **Semantic HTML**: Use appropriate HTML elements based on their meaning, not appearance:
  - `<button>` for interactive controls
  - `<a>` for navigation links
  - `<h1>` through `<h6>` for proper heading hierarchy
- **ARIA Attributes**: Add when HTML semantics are insufficient:
  - `aria-label` for elements without visible text
  - `aria-expanded` for toggleable sections
  - `aria-live` for dynamic content updates
- **Keyboard Navigation**: Ensure all interactive elements are keyboard accessible with visible focus states
- **Focus Management**: Implement proper tab order and focus trapping for modals

### Screen Reader Support
- **Alt Text**: Provide descriptive alt text for all images (empty for decorative images)
- **Form Labels**: Associate all form controls with labels using `htmlFor` and `id` attributes
- **Error Messages**: Connect error messages to inputs using `aria-describedby`
- **Announcements**: Use `aria-live` regions for important dynamic content changes

## 8. Testing Frontend Components

### Component Testing
- **Unit Tests**: Write tests for individual components using React Testing Library:
  ```tsx
  test('renders policy title', () => {
    render(<PolicyCard title="Test Policy" />);
    expect(screen.getByText('Test Policy')).toBeInTheDocument();
  });
  ```
- **Integration Tests**: Test component interactions and state changes
- **Snapshot Tests**: Create snapshots for UI components to detect unintended changes
- **Mock Services**: Use Jest mock functions to simulate API calls:
  ```tsx
  jest.mock('../../services/ACService', () => ({
    getPrinciples: jest.fn().mockResolvedValue([{ id: 1, title: 'Test' }])
  }));
  ```

### Test Coverage
- **Critical Paths**: Ensure 90%+ coverage for critical user flows (policy creation, compliance checking)
- **Edge Cases**: Test error states, loading states, and boundary conditions
- **Accessibility Tests**: Include tests using jest-axe for accessibility compliance
- **Browser Compatibility**: Test across Chrome, Firefox, Safari, and Edge