name: ACGS-PGP Quality Checks

on:
  push:
    branches: [ main, master, develop ]
    paths:
      - 'applications/shared/**'
  pull_request:
    branches: [ main, master, develop ]
    paths:
      - 'applications/shared/**'

jobs:
  quality-checks:
    name: Code Quality & Standards
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: applications/shared/package-lock.json
        
    - name: Install dependencies
      working-directory: applications/shared
      run: npm ci
      
    - name: TypeScript compilation check
      working-directory: applications/shared
      run: npm run type-check
      
    - name: ESLint check
      working-directory: applications/shared
      run: npm run lint
      
    - name: Prettier format check
      working-directory: applications/shared
      run: npm run format:check
      
    - name: Run unit tests
      working-directory: applications/shared
      run: npm test -- --coverage --watchAll=false
      
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: applications/shared/coverage/lcov.info
        flags: shared-components
        name: ACGS-PGP Shared Components
        
    - name: Build Storybook
      working-directory: applications/shared
      run: npm run build-storybook
      
    - name: ACGS Service Integration Check
      working-directory: applications/shared
      run: |
        echo "üîç Checking ACGS service integration patterns..."
        
        # Check for proper environment variable usage
        if grep -r "localhost:[0-9]" --include="*.ts" --include="*.tsx" src/ 2>/dev/null; then
          echo "‚ùå Hardcoded localhost URLs found. Use environment variables."
          exit 1
        fi
        
        # Check for proper error boundary usage
        if ! grep -r "ServiceErrorBoundary\|ErrorBoundary" --include="*.tsx" src/components/ 2>/dev/null; then
          echo "‚ö†Ô∏è  Warning: No error boundaries found in components"
        fi
        
        # Check for proper loading state usage
        if ! grep -r "useLoadingState\|LoadingButton\|Spinner" --include="*.tsx" src/components/ 2>/dev/null; then
          echo "‚ö†Ô∏è  Warning: No loading states found in components"
        fi
        
        echo "‚úÖ ACGS integration patterns check completed"

  accessibility-check:
    name: Accessibility Testing
    runs-on: ubuntu-latest
    needs: quality-checks
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: applications/shared/package-lock.json
        
    - name: Install dependencies
      working-directory: applications/shared
      run: npm ci
      
    - name: Build Storybook
      working-directory: applications/shared
      run: npm run build-storybook
      
    - name: Run accessibility tests
      working-directory: applications/shared
      run: |
        # Install axe-core for accessibility testing
        npm install -g @axe-core/cli
        
        # Start a simple HTTP server for Storybook
        npx http-server storybook-static -p 6006 &
        SERVER_PID=$!
        
        # Wait for server to start
        sleep 10
        
        # Run axe accessibility tests on key stories
        echo "üîç Running accessibility tests on ACGS components..."
        
        # Test main component stories
        axe http://localhost:6006/iframe.html?id=components-loading-spinner--default || echo "‚ö†Ô∏è  Accessibility issues found in Spinner"
        axe http://localhost:6006/iframe.html?id=components-governance-compliancechecker--default || echo "‚ö†Ô∏è  Accessibility issues found in ComplianceChecker"
        
        # Kill the server
        kill $SERVER_PID
        
        echo "‚úÖ Accessibility testing completed"

  security-check:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: applications/shared/package-lock.json
        
    - name: Install dependencies
      working-directory: applications/shared
      run: npm ci
      
    - name: Run npm audit
      working-directory: applications/shared
      run: npm audit --audit-level=moderate
      
    - name: Check for sensitive data
      working-directory: applications/shared
      run: |
        echo "üîç Checking for sensitive data patterns..."
        
        # Check for potential secrets
        if grep -r -i "password\|secret\|key\|token" --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" src/ | grep -v "// " | grep -v "interface\|type\|prop"; then
          echo "‚ö†Ô∏è  Potential sensitive data found. Review carefully."
        fi
        
        # Check for console.log in production code
        if grep -r "console\.log" --include="*.ts" --include="*.tsx" src/ 2>/dev/null; then
          echo "‚ö†Ô∏è  console.log statements found. Consider removing for production."
        fi
        
        echo "‚úÖ Security check completed"

  constitutional-compliance:
    name: Constitutional Governance Compliance
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: ACGS Constitutional Compliance Check
      working-directory: applications/shared
      run: |
        echo "üèõÔ∏è Checking ACGS constitutional governance compliance..."
        
        # Check for proper authentication integration
        if grep -r "useAuth\|AuthContext" --include="*.tsx" src/components/ 2>/dev/null; then
          echo "‚úÖ Authentication integration found"
        else
          echo "‚ö†Ô∏è  No authentication integration found in components"
        fi
        
        # Check for proper service integration patterns
        SERVICES=("AC" "GS" "PGC" "Auth" "Integrity" "FV" "EC")
        for service in "${SERVICES[@]}"; do
          if grep -r "${service}Service\|${service}_API_URL" --include="*.ts" --include="*.tsx" src/ 2>/dev/null; then
            echo "‚úÖ ${service} service integration found"
          fi
        done
        
        # Check for proper error handling
        if grep -r "try.*catch\|ErrorBoundary" --include="*.ts" --include="*.tsx" src/ 2>/dev/null; then
          echo "‚úÖ Error handling patterns found"
        else
          echo "‚ùå No error handling patterns found"
          exit 1
        fi
        
        # Check for accessibility compliance
        if grep -r "aria-\|role=\|alt=" --include="*.tsx" src/components/ 2>/dev/null; then
          echo "‚úÖ Accessibility attributes found"
        else
          echo "‚ö†Ô∏è  Limited accessibility attributes found"
        fi
        
        echo "‚úÖ Constitutional governance compliance check completed"

  performance-check:
    name: Performance Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: applications/shared/package-lock.json
        
    - name: Install dependencies
      working-directory: applications/shared
      run: npm ci
      
    - name: Bundle size analysis
      working-directory: applications/shared
      run: |
        echo "üìä Analyzing bundle size and performance..."
        
        # Build the library
        npm run build
        
        # Check bundle size (basic check)
        if [ -d "dist" ]; then
          BUNDLE_SIZE=$(du -sh dist/ | cut -f1)
          echo "üì¶ Bundle size: $BUNDLE_SIZE"
          
          # Check for large files
          find dist/ -size +100k -type f | while read file; do
            echo "‚ö†Ô∏è  Large file found: $file ($(du -sh "$file" | cut -f1))"
          done
        fi
        
        # Check for performance anti-patterns
        if grep -r "useEffect.*\[\]" --include="*.tsx" src/ | wc -l | awk '{if($1>10) print "‚ö†Ô∏è  Many useEffect with empty deps found"}'; then
          echo "Consider optimizing useEffect usage"
        fi
        
        echo "‚úÖ Performance analysis completed"
